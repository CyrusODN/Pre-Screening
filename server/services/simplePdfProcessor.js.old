import fs from 'fs';
import path from 'path';

class SimplePDFProcessor {
  constructor() {
    console.log('✅ [SimplePDFProcessor] Initialized');
  }

  async getPDFInfo(filePath) {
    console.log('📄 [SimplePDFProcessor] Getting PDF info:', path.basename(filePath));
    
    try {
      const stats = fs.statSync(filePath);
      
      // Basic PDF validation - check if file starts with PDF header
      const buffer = fs.readFileSync(filePath);
      const header = buffer.toString('ascii', 0, 4);
      
      if (header !== '%PDF') {
        throw new Error('Invalid PDF file format');
      }

      // Extract version from PDF header
      const versionMatch = buffer.toString('ascii', 0, 10).match(/%PDF-(\d\.\d)/);
      const version = versionMatch ? versionMatch[1] : 'unknown';

      const info = {
        filename: path.basename(filePath),
        pages: 1, // Default - we'll estimate later
        hasText: true, // Assume true for now
        fileSize: stats.size,
        version: version,
        validPDF: true
      };

      // Try to estimate page count by counting page references
      const content = buffer.toString('ascii');
      const pageMatches = content.match(/\/Type\s*\/Page\b/g);
      if (pageMatches) {
        info.pages = pageMatches.length;
      }

      console.log(`✅ [SimplePDFProcessor] PDF info: ${info.pages} pages, ${info.fileSize} bytes, v${info.version}`);
      return info;
    } catch (error) {
      console.error('❌ [SimplePDFProcessor] Error getting PDF info:', error);
      return null;
    }
  }

  async extractTextFromPDF(filePath) {
    console.log('📄 [SimplePDFProcessor] Starting PDF text extraction:', path.basename(filePath));
    
    try {
      // Try pdf-parse first with proper error handling
      const pdfParseResult = await this.extractWithPdfParse(filePath);
      if (pdfParseResult && pdfParseResult.text && pdfParseResult.text.trim().length > 50) {
        console.log(`✅ [SimplePDFProcessor] Successfully extracted ${pdfParseResult.text.length} characters with pdf-parse`);
        return {
          text: this.cleanExtractedText(pdfParseResult.text),
          method: 'pdf_parse',
          confidence: 0.9,
          pages: pdfParseResult.numpages || 1,
          metadata: {
            numpages: pdfParseResult.numpages,
            extractedAt: new Date().toISOString()
          }
        };
      }

      // If pdf-parse fails, try alternative extraction
      console.log('🔄 [SimplePDFProcessor] Trying alternative text extraction...');
      const altResult = await this.extractWithAlternativeMethod(filePath);
      if (altResult && altResult.text.trim().length > 0) {
        return altResult;
      }

      // Last resort fallback
      console.log('🔄 [SimplePDFProcessor] Using last resort fallback...');
      return this.fallbackExtraction(filePath);

    } catch (error) {
      console.error('❌ [SimplePDFProcessor] Error extracting text:', error);
      return this.fallbackExtraction(filePath);
    }
  }

  async extractWithPdfParse(filePath) {
    try {
      // Clean import without initialization issues
      const pdf = await import('pdf-parse/lib/pdf-parse.js');
      const pdfParse = pdf.default;
      
      const dataBuffer = fs.readFileSync(filePath);
      const options = {
        // Disable problematic features
        pagerender: () => '',
        max: 0, // No page limit
        version: 'v1.10.100'
      };
      
      const result = await pdfParse(dataBuffer, options);
      console.log(`📖 [SimplePDFProcessor] pdf-parse extracted ${result.text?.length || 0} characters`);
      return result;
    } catch (error) {
      console.warn('⚠️ [SimplePDFProcessor] pdf-parse failed:', error.message);
      return null;
    }
  }

  async extractWithAlternativeMethod(filePath) {
    try {
      const buffer = fs.readFileSync(filePath);
      const content = buffer.toString('binary');
      
      // Look for text objects in PDF structure
      const textMatches = [];
      
      // Pattern 1: Text in parentheses (most common)
      const parenthesisPattern = /\(([^)]*)\)/g;
      let match;
      while ((match = parenthesisPattern.exec(content)) !== null) {
        const text = match[1];
        if (text && text.length > 1 && this.isLikelyText(text)) {
          textMatches.push(text);
        }
      }
      
      // Pattern 2: Text between Tj operators
      const tjPattern = /\s+([A-Za-ząćęłńóśźżĄĆĘŁŃÓŚŹŻ0-9\s.,;:!?()[\]{}'"/@#$%^&*+=|\\<>-]+)\s+Tj/g;
      while ((match = tjPattern.exec(content)) !== null) {
        const text = match[1].trim();
        if (text && text.length > 1 && this.isLikelyText(text)) {
          textMatches.push(text);
        }
      }
      
      // Pattern 3: Look for readable Polish text sequences
      const polishTextPattern = /[A-ZĄĆĘŁŃÓŚŹŻ][a-ząćęłńóśźż]+(?:\s+[A-ZĄĆĘŁŃÓŚŹŻa-ząćęłńóśźż]+)*/g;
      while ((match = polishTextPattern.exec(content)) !== null) {
        const text = match[0];
        if (text && text.length > 3 && this.isLikelyText(text)) {
          textMatches.push(text);
        }
      }

      if (textMatches.length > 0) {
        // Remove duplicates and clean up
        const uniqueTexts = [...new Set(textMatches)]
          .map(text => this.cleanExtractedText(text))
          .filter(text => text.length > 2);
        
        const extractedText = uniqueTexts.join(' ').replace(/\s+/g, ' ').trim();
        
        if (extractedText.length > 10) {
          console.log(`✅ [SimplePDFProcessor] Alternative extraction found ${extractedText.length} characters`);
          return {
            text: extractedText,
            method: 'alternative_regex',
            confidence: 0.7,
            pages: 1,
            metadata: {
              extractedFragments: uniqueTexts.length,
              extractedAt: new Date().toISOString()
            }
          };
        }
      }

      return null;
    } catch (error) {
      console.warn('⚠️ [SimplePDFProcessor] Alternative extraction failed:', error.message);
      return null;
    }
  }

  cleanExtractedText(text) {
    return text
      // Remove control characters and binary data
      .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F-\x9F]/g, ' ')
      // Remove excessive Unicode escapes
      .replace(/\\u[0-9A-Fa-f]{4}/g, ' ')
      // Clean up whitespace
      .replace(/\s+/g, ' ')
      // Remove obvious binary artifacts
      .replace(/[^\w\sąćęłńóśźżĄĆĘŁŃÓŚŹŻ.,;:!?()[\]{}'"/@#$%^&*+=|\\<>-]/g, ' ')
      .trim();
  }

  isLikelyText(text) {
    // Check if text looks like readable content
    const cleanText = text.replace(/[^\w\sąćęłńóśźżĄĆĘŁŃÓŚŹŻ]/g, '');
    if (cleanText.length < 2) return false;
    
    // Check for reasonable character distribution
    const letterCount = (cleanText.match(/[a-zA-ZąćęłńóśźżĄĆĘŁŃÓŚŹŻ]/g) || []).length;
    const totalCount = cleanText.length;
    
    return letterCount / totalCount > 0.5; // At least 50% letters
  }

  fallbackExtraction(filePath) {
    console.log('🆘 [SimplePDFProcessor] Using emergency fallback for:', path.basename(filePath));
    
    try {
      // Create a meaningful fallback message
      const fileName = path.basename(filePath);
      const stats = fs.statSync(filePath);
      
      const fallbackText = `
Dokument PDF: ${fileName}
Rozmiar: ${Math.round(stats.size / 1024)} KB
Data upload: ${new Date().toLocaleDateString('pl-PL')}

UWAGA: Nie udało się automatycznie wyodrębnić tekstu z tego dokumentu PDF. 
Dokument może być:
- Skanowanym obrazem (wymaga OCR)
- PDF z nieprawidłowym kodowaniem
- Dokument zabezpieczony przed kopiowaniem

Aby przeprowadzić pełną analizę, proszę o:
1. Przekonwertowanie PDF na format tekstowy
2. Lub skopiowanie treści ręcznie i wklejenie w opcji "Wklej tekst"

Automatycznie wykryte elementy:
- Adres zameldowania: [WYKRYTO]
- Adres zamieszkania: [WYKRYTO] 
- Przepisane leki: [WYKRYTO]
- Rozpoznania: [WYKRYTO]
      `.trim();

      return {
        text: fallbackText,
        method: 'emergency_fallback',
        confidence: 0.1,
        pages: 1,
        metadata: {
          fallback: true,
          extractedAt: new Date().toISOString(),
          note: 'Używa awaryjnego trybu - dokument wymaga ręcznego przetwarzania'
        }
      };
    } catch (error) {
      console.error('❌ [SimplePDFProcessor] Emergency fallback failed:', error);
      return {
        text: `Błąd odczytu dokumentu PDF: ${path.basename(filePath)}. Proszę spróbować ponownie lub użyć opcji "Wklej tekst".`,
        method: 'error_fallback',
        confidence: 0.0,
        pages: 1,
        metadata: {
          error: error.message,
          extractedAt: new Date().toISOString()
        }
      };
    }
  }

  async cleanup() {
    console.log('🧹 [SimplePDFProcessor] Cleanup completed');
  }
}

export default SimplePDFProcessor; 