// src/agents/coordination/MultiAgentCoordinator.ts

import type { 
  MultiAgentCoordinator, 
  SharedContext, 
  AgentResult
} from '../../types/agents';
import type { PatientData, SupportedAIModel } from '../../types/index';
import drugMappingClient from '../../services/drugMappingClient';

// Import wszystkich agent√≥w
import { ClinicalSynthesisAgent } from '../core/ClinicalSynthesisAgent';
import { EpisodeAnalysisAgent } from '../core/EpisodeAnalysisAgent';
import { PharmacotherapyAgent } from '../core/PharmacotherapyAgent';
import { TRDAssessmentAgent } from '../core/TRDAssessmentAgent';
import { CriteriaAssessmentAgent } from '../core/CriteriaAssessmentAgent';
import { RiskAssessmentAgent } from '../core/RiskAssessmentAgent';

/**
 * Preprocessuje historiƒô medycznƒÖ, mapujƒÖc nazwy handlowe lek√≥w na substancje czynne
 */
async function preprocessMedicalHistoryForDrugMapping(medicalHistory: string): Promise<{
  processedHistory: string;
  drugMappings: Array<{original: string; mapped: string; confidence: number}>;
}> {
  console.log('üîç [Multi-Agent] Preprocessing medical history for drug mapping...');
  
  const drugMappings: Array<{original: string; mapped: string; confidence: number}> = [];
  let processedHistory = medicalHistory;
  
  // POPRAWIONE WZORCE - bardziej precyzyjne wykrywanie nazw lek√≥w
  const drugPatterns = [
    // Wzorce dla nazw lek√≥w z dawkami (najwy≈ºszy priorytet)
    /\b([A-Z][a-z]{2,}(?:\s+[A-Z][a-z]+)*)\s+(?:\d+(?:[.,]\d+)?\s*(?:mg|mcg|g|ml|IU|j\.m\.))/gi,
    
    // Wzorce dla znanych nazw handlowych lek√≥w (lista sprawdzonych nazw)
    /\b(Escitalopram|Elicea|Efevelon|Hydroxyzinum|Lamitrin|Pregabalin|Wellbutrin|Egzysta|Oreos|Lamotrix|Brintellix|Dulsevia|Neurovit|Welbox|Preato|Asertin|Dekristol|Mirtagen)\b/gi,
    
    // Wzorce dla nazw z typowymi ko≈Ñc√≥wkami farmaceutycznymi (tylko je≈õli majƒÖ sens)
    /\b([A-Z][a-z]{3,}(?:ina|ine|ol|um|an|on|ex|al|yl|il|ium))\b(?=\s+(?:\d+|tabl|kaps|mg|ml|dawka|rano|wiecz√≥r|na noc))/gi,
    
    // Wzorce dla nazw po s≈Çowach kluczowych
    /(?:lek|preparat|medication|drug|stosuje|przyjmuje|za≈ºywa|podaje)[\s:]+([A-Z][a-z]{3,}(?:\s+[A-Z][a-z]+)*)/gi,
    
    // Wzorce dla nazw w nawiasach (tylko je≈õli wyglƒÖdajƒÖ jak leki)
    /\(([A-Z][a-z]{3,}(?:\s+[A-Z][a-z]+)*)\)/gi
  ];
  
  const potentialDrugs = new Set<string>();
  
  // Lista s≈Ç√≥w do wykluczenia (nie sƒÖ lekami)
  const excludeWords = new Set([
    'Centrum', 'Szpital', 'Oddzia≈Ç', 'Gmina', 'Telefon', 'Stan', 'Hemoglobina', 
    'Cholesterol', 'Kreatynina', 'Witamina', 'Marcina', 'Nadal', 'Roste',
    'Zawiesina', 'Regon', 'Hormon', 'Kontrola', 'Skan', 'Mail', 'Dialog',
    'Terapia', 'Centrum', 'Ograniczon', 'Orygina', 'Zmian', 'Wspomina',
    'Spowodowan', 'Koleina', 'Ealan', 'Trijodotyronina', 'Tyreotropina',
    'Creatinine', 'Evevelon', 'Dulsevic', 'Elsay', 'Ntrum', 'Orycina'
  ]);
  
  // WyciƒÖgnij potencjalne nazwy lek√≥w
  drugPatterns.forEach(pattern => {
    let match;
    while ((match = pattern.exec(medicalHistory)) !== null) {
      const drugName = match[1].trim();
      
      // Sprawd≈∫ czy to nie jest s≈Çowo do wykluczenia
      if (drugName.length > 3 && 
          !excludeWords.has(drugName) && 
          !excludeWords.has(drugName.toLowerCase()) &&
          // Sprawd≈∫ czy nie zawiera cyfr (prawdopodobnie nie jest lekiem)
          !/\d/.test(drugName) &&
          // Sprawd≈∫ czy nie jest zbyt d≈Çugie (prawdopodobnie fragment tekstu)
          drugName.length < 25 &&
          // Sprawd≈∫ czy nie zawiera typowych s≈Ç√≥w niefarmaceutycznych
          !/(?:pacjent|leczenie|terapia|badanie|wizyta|kontrola|szpital|oddzia≈Ç|centrum|telefon|mail|adres|ulica|miasto)/i.test(drugName)) {
        potentialDrugs.add(drugName);
      }
    }
  });
  
  console.log(`üîç [Multi-Agent] Found ${potentialDrugs.size} potential drug names:`, Array.from(potentialDrugs));
  
  // Mapuj ka≈ºdƒÖ potencjalnƒÖ nazwƒô leku
  for (const drugName of potentialDrugs) {
    try {
      const mappingResult = await drugMappingClient.mapDrugToStandard(drugName);
      
      if (mappingResult.found && mappingResult.confidence > 0.7) { // Zwiƒôkszony pr√≥g confidence
        const standardName = mappingResult.standardName;
        const activeSubstance = mappingResult.activeSubstance;
        
        // U≈ºyj substancji czynnej jako g≈Ç√≥wnej nazwy
        const mappedName = activeSubstance || standardName;
        
        drugMappings.push({
          original: drugName,
          mapped: mappedName,
          confidence: mappingResult.confidence
        });
        
        // Zamie≈Ñ w tek≈õcie wszystkie wystƒÖpienia nazwy handlowej na substancjƒô czynnƒÖ
        const regex = new RegExp(`\\b${drugName.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\b`, 'gi');
        processedHistory = processedHistory.replace(regex, `${mappedName} (${drugName})`);
        
        console.log(`‚úÖ [Multi-Agent] Mapped: ${drugName} ‚Üí ${mappedName} (confidence: ${Math.round(mappingResult.confidence * 100)}%)`);
      } else {
        console.log(`‚ö†Ô∏è [Multi-Agent] No mapping found for: ${drugName} (confidence: ${mappingResult.confidence})`);
      }
    } catch (error) {
      console.error(`‚ùå [Multi-Agent] Error mapping drug ${drugName}:`, error);
    }
  }
  
  console.log(`‚úÖ [Multi-Agent] Drug mapping completed. Mapped ${drugMappings.length} drugs.`);
  
  return {
    processedHistory,
    drugMappings
  };
}

export class MultiAgentCoordinatorImpl implements MultiAgentCoordinator {
  private readonly agents: Map<string, any> = new Map();
  private readonly executionLog: string[] = [];
  private readonly RATE_LIMIT_DELAY = 45000; // 45 sekund miƒôdzy agentami - zwiƒôkszone z powodu rate limiting Claude
  private readonly CLAUDE_RATE_LIMIT_DELAY = 60000; // 60 sekund specjalnie dla Claude
  private readonly MAX_RETRIES = 3;

  constructor() {
    // Inicjalizacja wszystkich agent√≥w
    this.agents.set('clinical-synthesis', new ClinicalSynthesisAgent());
    this.agents.set('episode-analysis', new EpisodeAnalysisAgent());
    this.agents.set('pharmacotherapy-analysis', new PharmacotherapyAgent());
    this.agents.set('trd-assessment', new TRDAssessmentAgent());
    this.agents.set('criteria-assessment', new CriteriaAssessmentAgent());
    this.agents.set('risk-assessment', new RiskAssessmentAgent());
  }

  public async executeAgentPipeline(
    medicalHistory: string,
    studyProtocol: string,
    selectedModel: SupportedAIModel
  ): Promise<{
    finalResult: PatientData;
    agentResults: Record<string, AgentResult>;
    executionLog: string[];
  }> {
    this.log(`üöÄ Rozpoczynanie analizy wieloagentowej z modelem: ${selectedModel}`);
    
    // üîç PREPROCESSING: Mapowanie lek√≥w na poczƒÖtku
    console.log('üîç [Multi-Agent] Starting drug mapping preprocessing...');
    const { processedHistory, drugMappings } = await preprocessMedicalHistoryForDrugMapping(medicalHistory);
    
    // üîç DODANE LOGOWANIE PREPROCESSINGU
    console.log('üîç [Multi-Agent] Preprocessing results:');
    console.log('üìã Original history length:', medicalHistory.length);
    console.log('üìã Processed history length:', processedHistory.length);
    console.log('üîÑ Drug mappings found:', drugMappings.length);
    
    if (drugMappings.length > 0) {
      console.log('üîç [Multi-Agent] Drug mappings from preprocessing:');
      drugMappings.forEach(mapping => {
        console.log(`  - ${mapping.original} ‚Üí ${mapping.mapped} (confidence: ${Math.round(mapping.confidence * 100)}%)`);
      });
    } else {
      console.log('‚ö†Ô∏è [Multi-Agent] No drug mappings found during preprocessing!');
    }
    
    // Utw√≥rz kontekst wsp√≥≈Çdzielony z wzbogaconƒÖ historiƒÖ
    const sharedContext: SharedContext = {
      medicalHistory: processedHistory, // U≈ºyj wzbogaconej historii
      studyProtocol,
      modelUsed: selectedModel,
      drugMappingInfo: {
        mappingsApplied: drugMappings.length,
        mappings: drugMappings,
        preprocessedAt: new Date().toISOString()
      }
    };

    const agentResults: Record<string, AgentResult> = {};

    // FAZA 1: Analiza podstawowa - sekwencyjna dla zale≈ºno≈õci
    this.log('üöÄ FAZA 1: Rozpoczynanie analizy podstawowej...');
    
    // Krok 1a: Clinical Synthesis (brak zale≈ºno≈õci)
    const clinicalResult = await this.executeAgent('clinical-synthesis', sharedContext);
    agentResults['clinical-synthesis'] = clinicalResult;
    sharedContext.clinicalSynthesis = clinicalResult;
    this.log('‚úÖ Agent Syntezy Klinicznej zako≈Ñczony pomy≈õlnie');

    // Krok 1b: Episode Analysis (zale≈ºy tylko od clinical-synthesis)
    const episodeResult = await this.executeAgent('episode-analysis', sharedContext);
    agentResults['episode-analysis'] = episodeResult;
    sharedContext.episodeAnalysis = episodeResult;
    this.log('‚úÖ Agent Analizy Epizod√≥w zako≈Ñczony pomy≈õlnie');

    // Krok 1c: Pharmacotherapy Analysis (zale≈ºy od clinical-synthesis i episode-analysis)
    const pharmacoResult = await this.executeAgent('pharmacotherapy-analysis', sharedContext);
    agentResults['pharmacotherapy-analysis'] = pharmacoResult;
    sharedContext.pharmacotherapyAnalysis = pharmacoResult;
    this.log('‚úÖ Agent Farmakoterapii zako≈Ñczony pomy≈õlnie');

    // FAZA 2: Analiza TRD (zale≈ºy od fazy 1)
    this.log('üî¨ FAZA 2: Rozpoczynanie analizy TRD...');
    
    const trdResult = await this.executeAgent('trd-assessment', sharedContext);
    agentResults['trd-assessment'] = trdResult;
    sharedContext.trdAssessment = trdResult;
    this.log('‚úÖ Agent TRD zako≈Ñczony');

    // FAZA 3: Ocena kryteri√≥w (zale≈ºy od faz 1-2)
    this.log('üìã FAZA 3: Rozpoczynanie oceny kryteri√≥w...');
    
    const criteriaResult = await this.executeAgent('criteria-assessment', sharedContext);
    agentResults['criteria-assessment'] = criteriaResult;
    sharedContext.inclusionCriteriaAssessment = criteriaResult;
    this.log('‚úÖ Agent Oceny Kryteri√≥w zako≈Ñczony');

    // FAZA 4: Ocena ryzyka (zale≈ºy od wszystkich poprzednich)
    this.log('‚ö†Ô∏è FAZA 4: Rozpoczynanie oceny ryzyka...');
    
    const riskResult = await this.executeAgent('risk-assessment', sharedContext);
    agentResults['risk-assessment'] = riskResult;
    sharedContext.riskAssessment = riskResult;
    this.log('‚úÖ Agent Oceny Ryzyka zako≈Ñczony');

    // FAZA 5: Synteza ko≈Ñcowa
    this.log('üéØ FAZA 5: Synteza wynik√≥w...');
    
    const finalResult = await this.synthesizeFinalResult(agentResults, sharedContext);
    
    // Dodaj informacje o mapowaniu lek√≥w do wyniku ko≈Ñcowego
    finalResult.drugMappingInfo = {
      mappingsApplied: drugMappings.length,
      mappings: drugMappings,
      preprocessedAt: new Date().toISOString()
    };
    
    this.log(`‚úÖ Analiza wieloagentowa zako≈Ñczona pomy≈õlnie z ${drugMappings.length} mapowaniami lek√≥w`);
    
    return {
      finalResult,
      agentResults,
      executionLog: [...this.executionLog]
    };
  }

  private async executeAgent(agentName: string, context: SharedContext): Promise<AgentResult> {
    const agent = this.agents.get(agentName);
    if (!agent) {
      throw new Error(`Agent ${agentName} nie zosta≈Ç znaleziony`);
    }

    this.log(`üîÑ Wykonywanie agenta: ${agentName}`);
    const startTime = Date.now();
    
    // Dodaj op√≥≈∫nienie przed wykonaniem agenta (opr√≥cz pierwszego)
    if (agentName !== 'clinical-synthesis') {
      // U≈ºyj d≈Çu≈ºszego op√≥≈∫nienia dla Claude
      const delay = context.modelUsed === 'claude-opus' ? this.CLAUDE_RATE_LIMIT_DELAY : this.RATE_LIMIT_DELAY;
      this.log(`‚è≥ Oczekiwanie ${delay/1000}s przed wykonaniem ${agentName} (rate limiting ${context.modelUsed} API)...`);
      await this.sleep(delay);
    }
    
    // USPRAWNIENIE: Wzbogaƒá kontekst o wyniki poprzednich agent√≥w w czytelnej formie
    const enrichedContext = this.enrichContextForAgent(agentName, context);
    
    let lastError: Error | null = null;
    
    // Retry logic dla b≈Çƒôd√≥w rate limit
    for (let attempt = 1; attempt <= this.MAX_RETRIES; attempt++) {
      try {
        this.log(`üéØ ${agentName} - pr√≥ba ${attempt}/${this.MAX_RETRIES}`);
        const result = await agent.process(enrichedContext);
        const duration = Date.now() - startTime;
        this.log(`‚è±Ô∏è Agent ${agentName} zako≈Ñczony w ${duration}ms`);
        return result;
        
      } catch (error) {
        lastError = error as Error;
        const isRateLimit = error instanceof Error && 
          (error.message.includes('rate_limit_error') || 
           error.message.includes('429') ||
           error.message.includes('rate limit'));
        
        if (isRateLimit && attempt < this.MAX_RETRIES) {
          // Zwiƒôksz op√≥≈∫nienie eksponencjalnie dla kolejnych pr√≥b
          const baseDelay = context.modelUsed === 'claude-opus' ? this.CLAUDE_RATE_LIMIT_DELAY : this.RATE_LIMIT_DELAY;
          const retryDelay = baseDelay * attempt * 1.5;
          this.log(`‚ö†Ô∏è ${agentName} - rate limit ${context.modelUsed} API (pr√≥ba ${attempt}/${this.MAX_RETRIES}). Oczekiwanie ${retryDelay/1000}s przed ponownƒÖ pr√≥bƒÖ...`);
          await this.sleep(retryDelay);
          continue;
        } else {
          // Nie jest to rate limit lub wyczerpano pr√≥by
          break;
        }
      }
    }
    
    // Je≈õli dotarli≈õmy tutaj, wszystkie pr√≥by siƒô nie powiod≈Çy
    const duration = Date.now() - startTime;
    this.log(`üí• Agent ${agentName} zako≈Ñczony b≈Çƒôdem po ${duration}ms: ${lastError?.message || 'Unknown error'}`);
    
    // Sprawd≈∫ czy to b≈ÇƒÖd rate limit Claude - je≈õli tak, zasugeruj u≈ºycie innego modelu
    const isClaudeRateLimit = context.modelUsed === 'claude-opus' && lastError?.message?.includes('rate_limit_error');
    if (isClaudeRateLimit) {
      this.log(`üí° Sugestia: Rozwa≈º u≈ºycie modelu 'gemini' lub 'o3' zamiast 'claude-opus' aby uniknƒÖƒá limit√≥w API`);
    }
    
    // Zamiast rzucaƒá b≈ÇƒÖd dalej, zwracamy fallback result
    console.error(`[MultiAgentCoordinator] Szczeg√≥≈Çy b≈Çƒôdu ${agentName}:`, lastError);
    
    return {
      agentName: agentName,
      data: agent.getErrorFallback(),
      confidence: 0,
      warnings: [`B≈ÇƒÖd w ${agentName}: ${lastError?.message || 'Unknown error'}${isClaudeRateLimit ? ' (Claude rate limit - spr√≥buj inny model)' : ''}`],
      processingTime: duration,
      timestamp: new Date().toISOString()
    };
  }

  // NOWA METODA: Wzbogacanie kontekstu dla ka≈ºdego agenta
  private enrichContextForAgent(agentName: string, context: SharedContext): SharedContext {
    const enriched = { ...context };
    
    // Dodaj podsumowanie wynik√≥w poprzednich agent√≥w w czytelnej formie
    let previousResults = '';
    
    if (context.clinicalSynthesis && agentName !== 'clinical-synthesis') {
      previousResults += `\n=== WYNIKI SYNTEZY KLINICZNEJ ===\n`;
      previousResults += `PrzeglƒÖd pacjenta: ${context.clinicalSynthesis.data?.patientOverview || 'Brak danych'}\n`;
      previousResults += `Historia leczenia: ${context.clinicalSynthesis.data?.treatmentHistory || 'Brak danych'}\n`;
      previousResults += `Kluczowe obserwacje: ${context.clinicalSynthesis.data?.keyObservations?.join('; ') || 'Brak danych'}\n`;
      previousResults += `Czynniki ryzyka: ${context.clinicalSynthesis.data?.riskFactors?.join('; ') || 'Brak danych'}\n`;
    }
    
    if (context.episodeAnalysis && !['clinical-synthesis', 'episode-analysis'].includes(agentName)) {
      previousResults += `\n=== WYNIKI ANALIZY EPIZOD√ìW ===\n`;
      previousResults += `Najbardziej prawdopodobny scenariusz: ${context.episodeAnalysis.data?.mostLikelyScenario || 'N/A'}\n`;
      previousResults += `Scenariusze epizod√≥w:\n`;
      context.episodeAnalysis.data?.scenarios?.forEach(s => {
        previousResults += `- Scenariusz ${s.id}: ${s.description} (${s.startDate} - ${s.endDate || 'trwajƒÖcy'}), pewno≈õƒá: ${s.confidence}\n`;
      });
      previousResults += `Wniosek: ${context.episodeAnalysis.data?.conclusion || 'Brak wniosku'}\n`;
    }
    
    if (context.pharmacotherapyAnalysis && !['clinical-synthesis', 'episode-analysis', 'pharmacotherapy-analysis'].includes(agentName)) {
      previousResults += `\n=== WYNIKI ANALIZY FARMAKOTERAPII ===\n`;
      previousResults += `O≈õ czasu farmakoterapii:\n`;
      context.pharmacotherapyAnalysis.data?.timeline?.forEach(item => {
        previousResults += `- ${item.drugName} (${item.dose}): ${item.startDate} - ${item.endDate}, grupa: ${item.attemptGroup}, uwagi: ${item.notes}\n`;
      });
      previousResults += `Mapowania lek√≥w:\n`;
      context.pharmacotherapyAnalysis.data?.drugMappings?.forEach(m => {
        previousResults += `- ${m.originalName} ‚Üí ${m.standardName}\n`;
      });
      if (context.pharmacotherapyAnalysis.data?.prohibitedDrugs?.length > 0) {
        previousResults += `Leki zabronione: ${context.pharmacotherapyAnalysis.data.prohibitedDrugs.map(d => `${d.drugName} (${d.status})`).join('; ')}\n`;
      }
    }
    
    if (context.trdAssessment && !['clinical-synthesis', 'episode-analysis', 'pharmacotherapy-analysis', 'trd-assessment'].includes(agentName)) {
      previousResults += `\n=== WYNIKI OCENY TRD ===\n`;
      previousResults += `Status TRD: ${context.trdAssessment.data?.trdStatus || 'N/A'}\n`;
      previousResults += `Liczba niepowodze≈Ñ: ${context.trdAssessment.data?.failureCount || 0}\n`;
      previousResults += `Data rozpoczƒôcia epizodu: ${context.trdAssessment.data?.episodeStartDate || 'N/A'}\n`;
      previousResults += `Adekwatne pr√≥by leczenia:\n`;
      context.trdAssessment.data?.adequateTrials?.forEach(trial => {
        previousResults += `- ${trial.drugName} (${trial.dose}): ${trial.duration} tygodni, adekwatna: ${trial.adequate ? 'TAK' : 'NIE'}\n`;
      });
      previousResults += `Wniosek TRD: ${context.trdAssessment.data?.conclusion || 'Brak wniosku'}\n`;
    }
    
    // Dodaj wyniki poprzednich agent√≥w do kontekstu
    if (previousResults) {
      enriched.previousAgentResults = previousResults;
    }
    
    return enriched;
  }

  private sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  private async synthesizeFinalResult(
    agentResults: Record<string, AgentResult>, 
    context: SharedContext
  ): Promise<PatientData> {
    // Pobierz wyniki z agent√≥w
    const clinicalSynthesis = agentResults['clinical-synthesis']?.data;
    const episodeAnalysis = agentResults['episode-analysis']?.data;
    const pharmacotherapyAnalysis = agentResults['pharmacotherapy-analysis']?.data;
    const trdAssessment = agentResults['trd-assessment']?.data;
    const criteriaAssessment = agentResults['criteria-assessment']?.data;
    const riskAssessment = agentResults['risk-assessment']?.data;

    // Generuj ID pacjenta
    const patientId = this.generatePatientId();

    // Synteza danych pacjenta
    const patientData: PatientData = {
      summary: {
        id: patientId,
        age: this.extractAge(clinicalSynthesis) || 0,
        mainDiagnosis: clinicalSynthesis?.mainDiagnosis || 'Brak danych o g≈Ç√≥wnym rozpoznaniu',
        comorbidities: await this.extractComorbidities(clinicalSynthesis)
      },
      
      episodeEstimation: {
        scenarios: episodeAnalysis?.scenarios?.map((scenario: any) => ({
          id: scenario.id,
          description: scenario.description,
          evidence: scenario.evidence,
          startDate: scenario.startDate,
          endDate: scenario.endDate,
          confidence: scenario.confidence
        })) || [],
        conclusion: episodeAnalysis?.conclusion || 'Brak danych o epizodach'
      },

      trdAnalysis: {
        episodeStartDate: this.extractEpisodeStartDate(episodeAnalysis, trdAssessment),
        pharmacotherapy: pharmacotherapyAnalysis?.timeline || [],
        conclusion: trdAssessment?.conclusion || 'Brak oceny TRD'
      },

      inclusionCriteria: this.convertCriteriaToLegacyFormat(criteriaAssessment?.inclusionCriteria || []),
      psychiatricExclusionCriteria: this.convertCriteriaToLegacyFormat(criteriaAssessment?.psychiatricExclusionCriteria || []),
      medicalExclusionCriteria: this.convertCriteriaToLegacyFormat(criteriaAssessment?.medicalExclusionCriteria || []),

      reportConclusion: {
        overallQualification: this.generateOverallQualification(riskAssessment, criteriaAssessment),
        mainIssues: this.extractMainIssues(riskAssessment, criteriaAssessment),
        criticalInfoNeeded: this.extractCriticalInfo(riskAssessment, criteriaAssessment),
        estimatedProbability: riskAssessment?.inclusionProbability?.score || 0,
        riskFactors: this.extractRiskFactors(clinicalSynthesis, riskAssessment)
      },

      // Kopiuj kontekst historyczny z analizy farmakoterapii
      historicalContext: pharmacotherapyAnalysis?.historicalContext,

      analyzedAt: new Date().toISOString(),
      isMockData: false,
      modelUsed: context.modelUsed
    };

    return patientData;
  }

  // Metody pomocnicze do ekstrakcji danych
  private extractAge(clinicalSynthesis: any): number | null {
    if (!clinicalSynthesis?.patientOverview) return null;
    
    // Spr√≥buj r√≥≈ºnych wzorc√≥w dla wieku
    const patterns = [
      /(\d+)[\s-]*lat/i,          // "33 lat", "33-lat"
      /(\d+)[\s-]*roku/i,         // "33 roku", "33-roku"  
      /wiek[:\s]*(\d+)/i,         // "wiek: 33", "wiek 33"
      /lat[:\s]*(\d+)/i,          // "lat: 33"
      /(?:^|\s)(\d+)(?:[\s-]*letni|[\s-]*letnia)/i, // "33-letni", "33 letnia"
    ];
    
    for (const pattern of patterns) {
      const ageMatch = clinicalSynthesis.patientOverview.match(pattern);
      if (ageMatch) {
        const age = parseInt(ageMatch[1]);
        if (age >= 18 && age <= 100) { // Sprawdzenie sensowno≈õci wieku
          return age;
        }
      }
    }
    
    // Spr√≥buj znale≈∫ƒá w keyObservations
    if (clinicalSynthesis.keyObservations) {
      for (const observation of clinicalSynthesis.keyObservations) {
        for (const pattern of patterns) {
          const ageMatch = observation.match(pattern);
          if (ageMatch) {
            const age = parseInt(ageMatch[1]);
            if (age >= 18 && age <= 100) {
              return age;
            }
          }
        }
      }
    }
    
    return null;
  }

  private extractMainDiagnosis(clinicalSynthesis: any): string | null {
    if (!clinicalSynthesis?.patientOverview) return null;
    
    const overview = clinicalSynthesis.patientOverview;
    const treatmentHistory = clinicalSynthesis.treatmentHistory || '';
    const keyObservations = (clinicalSynthesis.keyObservations || []).join(' ');
    const allText = `${overview} ${treatmentHistory} ${keyObservations}`.toLowerCase();
    
    console.log('[DEBUG] extractMainDiagnosis - Tekst do analizy (pierwsze 200 znak√≥w):', allText.substring(0, 200));
    
    // PRIORYTET 1: Szukaj kod√≥w F33 (depresja nawracajƒÖca) - NAJWY≈ªSZY PRIORYTET
    const f33Patterns = [
      /F33(?:\.\d+)?/gi,
      /F33(?:\.\d+)?\s*[:-]?\s*([^,.;()]*)/gi
    ];
    
    for (const pattern of f33Patterns) {
      let match;
      while ((match = pattern.exec(allText)) !== null) {
        console.log('[DEBUG] extractMainDiagnosis - Znaleziono kod F33:', match[0]);
        // F33 to zawsze depresja nawracajƒÖca - zwr√≥ƒá natychmiast
        return 'Depresja nawracajƒÖca (F33)';
      }
    }
    
    // PRIORYTET 2: Szukaj innych kod√≥w depresyjnych F3x
    const f3xPatterns = [
      /F3[0-9](?:\.\d+)?/gi,
      /F3[0-9](?:\.\d+)?\s*[:-]?\s*([^,.;()]*)/gi
    ];
    
    for (const pattern of f3xPatterns) {
      let match;
      while ((match = pattern.exec(allText)) !== null) {
        console.log('[DEBUG] extractMainDiagnosis - Znaleziono kod F3x:', match[0]);
        const fullMatch = match[0];
        const description = match[1] || '';
        
        // Sprawd≈∫ czy to nie F32 (epizod depresyjny) lub inne kody depresyjne
        if (fullMatch.match(/F3[0-2]/i)) {
          return `Depresja (${fullMatch.toUpperCase()})${description ? ' - ' + description.trim() : ''}`;
        }
      }
    }
    
    // PRIORYTET 3: Szukaj opisowych rozpozna≈Ñ depresyjnych
    const depressionPatterns = [
      // Bezpo≈õrednie wzorce depresyjne
      /(?:depresj[a-z]*|TRD|lekoopora)[^,.;()]*(?:\s+F3[0-9](?:\.\d+)?)?/gi,
      /(?:nawracaj[a-z]*|powracaj[a-z]*|przewlek≈Ç[a-z]*)\s+depresj[a-z]*/gi,
      /(?:epizod|zaburzenia)\s+depresyjn[a-z]*/gi,
      /(?:depresj[a-z]*)\s+(?:nawracaj[a-z]*|powracaj[a-z]*|przewlek≈Ç[a-z]*)/gi,
      // G≈Ç√≥wne rozpoznanie explicite z depresjƒÖ
      /(?:g≈Ç√≥wn[a-z]*\s+)?(?:rozpoznanie|diagnoza)[:\s]*([^,.;()]*(?:depresj|TRD|lekoopora)[^,.;()]*)/gi,
      // Leczenie z powodu depresji
      /(?:leczony|hospitalizowany)\s+z\s+powodu\s+([^,.;()]*(?:depresj|TRD|lekoopora)[^,.;()]*)/gi
    ];
    
    for (const pattern of depressionPatterns) {
      let match;
      while ((match = pattern.exec(allText)) !== null) {
        const diagnosis = match[1] || match[0];
        console.log('[DEBUG] extractMainDiagnosis - Znaleziono potencjalnƒÖ depresjƒô:', diagnosis);
        if (diagnosis && diagnosis.length > 3) {
          const cleanedDiagnosis = this.cleanDiagnosisText(diagnosis);
          console.log('[DEBUG] extractMainDiagnosis - Po czyszczeniu:', cleanedDiagnosis);
          if (cleanedDiagnosis && cleanedDiagnosis.length > 3) {
            // Znaleziono rozpoznanie depresyjne - zwr√≥ƒá je jako g≈Ç√≥wne
            console.log('[DEBUG] extractMainDiagnosis - ZWRACAM DEPRESJƒò:', cleanedDiagnosis);
            return cleanedDiagnosis;
          }
        }
      }
    }
    
    console.log('[DEBUG] extractMainDiagnosis - Nie znaleziono depresji, szukam innych rozpozna≈Ñ...');
    
    // PRIORYTET 4: Og√≥lne wzorce rozpozna≈Ñ (je≈õli nie znaleziono depresji)
    const generalPatterns = [
      // Kody ICD-10 z opisami (ale nie F3x - te ju≈º sprawdzili≈õmy)
      /F[014-9]\d+(?:\.\d+)?\s*[:-]?\s*([^,.;()]+)/gi,
      // Opisowe rozpoznania
      /(?:rozpoznanie|diagnoza|leczony z powodu|hospitalizowany z powodu)[:\s]+([^,.;()]+)/gi,
      // G≈Ç√≥wne rozpoznanie explicite
      /(?:g≈Ç√≥wn[a-z]*\s+)?(?:rozpoznanie|diagnoza)[:\s]*([^,.;()]+)/gi
    ];
    
    const foundDiagnoses: Array<{diagnosis: string, frequency: number, context: string}> = [];
    
    // Znajd≈∫ wszystkie rozpoznania i policz ich czƒôstotliwo≈õƒá w kontek≈õcie leczenia
    for (const pattern of generalPatterns) {
      let match;
      while ((match = pattern.exec(allText)) !== null) {
        const diagnosis = match[1]?.trim();
        console.log('[DEBUG] extractMainDiagnosis - Znaleziono og√≥lne rozpoznanie:', diagnosis);
        if (diagnosis && diagnosis.length > 3) {
          const cleanedDiagnosis = this.cleanDiagnosisText(diagnosis);
          console.log('[DEBUG] extractMainDiagnosis - Po czyszczeniu og√≥lnego:', cleanedDiagnosis);
          if (cleanedDiagnosis) {
            // Policz czƒôstotliwo≈õƒá wystƒôpowania w kontek≈õcie leczenia
            const frequency = this.calculateDiagnosisFrequency(cleanedDiagnosis, allText);
            const context = this.analyzeDiagnosisContext(cleanedDiagnosis, allText);
            
            foundDiagnoses.push({
              diagnosis: cleanedDiagnosis,
              frequency,
              context
            });
          }
        }
      }
    }
    
    console.log('[DEBUG] extractMainDiagnosis - Znalezione rozpoznania:', foundDiagnoses);
    
    // Je≈õli nie znaleziono ≈ºadnych rozpozna≈Ñ, u≈ºyj fallback
    if (foundDiagnoses.length === 0) {
      console.log('[DEBUG] extractMainDiagnosis - Brak rozpozna≈Ñ, u≈ºywam fallback');
      return 'Depresja lekoopora (TRD)';
    }
    
    // SPECJALNA LOGIKA: Je≈õli znaleziono F33.1 w chorobach towarzyszƒÖcych, to znaczy ≈ºe to g≈Ç√≥wne rozpoznanie
    const hasF33InComorbidities = foundDiagnoses.some(d => d.diagnosis.match(/F33/i));
    if (hasF33InComorbidities) {
      console.log('[DEBUG] extractMainDiagnosis - Znaleziono F33 w rozpoznaniach - to g≈Ç√≥wne rozpoznanie!');
      return 'Depresja nawracajƒÖca (F33.1)';
    }
    
    // Sortuj wed≈Çug czƒôstotliwo≈õci i kontekstu leczenia
    foundDiagnoses.sort((a, b) => {
      // Priorytet dla rozpozna≈Ñ z kontekstem g≈Ç√≥wnego leczenia
      const aMainTreatment = a.context.includes('main_treatment') ? 10 : 0;
      const bMainTreatment = b.context.includes('main_treatment') ? 10 : 0;
      
      // Priorytet dla czƒôstotliwo≈õci
      const frequencyDiff = b.frequency - a.frequency;
      
      return (bMainTreatment - aMainTreatment) || frequencyDiff;
    });
    
    console.log('[DEBUG] extractMainDiagnosis - Po sortowaniu:', foundDiagnoses);
    console.log('[DEBUG] extractMainDiagnosis - ZWRACAM:', foundDiagnoses[0].diagnosis);
    
    return foundDiagnoses[0].diagnosis;
  }

  private cleanDiagnosisText(diagnosis: string): string | null {
    console.log('[DEBUG] cleanDiagnosisText - Wej≈õcie:', diagnosis);
    
    // Oczy≈õƒá tekst z niepotrzebnych informacji, ale zachowaj kluczowe czƒô≈õci diagnozy
    let cleaned = diagnosis
      .replace(/\d+[\s-]*letni[a]?/gi, '') // Usu≈Ñ wiek
      .replace(/kawaler|bezdzietny|wykszta≈Çcenie|mieszka|pracuje/gi, '') // Usu≈Ñ dane demograficzne
      .replace(/^(na|z powodu|przez|od|do)\s+/i, '') // Usu≈Ñ przedimki na poczƒÖtku
      .trim();
    
    console.log('[DEBUG] cleanDiagnosisText - Po podstawowym czyszczeniu:', cleaned);
    
    // NIE OBCINAJ ko≈Ñc√≥wek - mogƒÖ zawieraƒá wa≈ºne informacje o diagnozie
    // Usu≈Ñ tylko wyra≈∫ne dodatkowe informacje po przecinku/≈õredniku
    cleaned = cleaned.replace(/\s*[,;]\s*(?:i|oraz|a tak≈ºe).*$/i, '');
    
    console.log('[DEBUG] cleanDiagnosisText - Po usuniƒôciu ko≈Ñc√≥wek:', cleaned);
    
    // Odrzuƒá zbyt kr√≥tkie terminy
    if (cleaned.length < 3) {
      console.log('[DEBUG] cleanDiagnosisText - Odrzucono: za kr√≥tkie');
      return null;
    }
    
    // Odrzuƒá tylko bardzo og√≥lne terminy, ale zachowaj konkretne diagnozy
    const tooGeneral = /^(choroby|schorzenia|problemy|stan|objawy|leczenie|terapia)$/i;
    if (tooGeneral.test(cleaned)) {
      console.log('[DEBUG] cleanDiagnosisText - Odrzucono: zbyt og√≥lne');
      return null;
    }
    
    // Popraw typowe b≈Çƒôdy w ekstraktowaniu
    if (cleaned.startsWith('m ')) {
      console.log('[DEBUG] cleanDiagnosisText - Naprawiam b≈ÇƒÖd "m " na poczƒÖtku');
      cleaned = cleaned.replace(/^m\s+/, ''); // Usu≈Ñ "m " na poczƒÖtku
    }
    
    console.log('[DEBUG] cleanDiagnosisText - Wynik ko≈Ñcowy:', cleaned);
    
    return cleaned;
  }

  private calculateDiagnosisFrequency(diagnosis: string, text: string): number {
    const diagnosisLower = diagnosis.toLowerCase();
    let frequency = 0;
    
    // Wzorce dla r√≥≈ºnych form wystƒôpowania rozpoznania
    const patterns = [
      new RegExp(`\\b${diagnosisLower}\\b`, 'gi'),
      new RegExp(`${diagnosisLower.split(' ')[0]}`, 'gi'), // Pierwsze s≈Çowo
      // Dla depresji
      /depresj[a-z]*/gi,
      /TRD/gi,
      /lekoopora/gi,
      // Dla OCD
      /obsesyjn[a-z]*/gi,
      /kompulsyjn[a-z]*/gi,
      /OCD/gi
    ];
    
    for (const pattern of patterns) {
      const matches = text.match(pattern);
      if (matches) {
        frequency += matches.length;
      }
    }
    
    return frequency;
  }

  private analyzeDiagnosisContext(diagnosis: string, text: string): string {
    const diagnosisLower = diagnosis.toLowerCase();
    let context = '';
    
    // Sprawd≈∫ kontekst g≈Ç√≥wnego leczenia
    const mainTreatmentPatterns = [
      /(?:g≈Ç√≥wnie|przede wszystkim|podstawowo)\s+leczony\s+z\s+powodu/gi,
      /(?:wiƒôkszo≈õƒá|wielu|liczne)\s+(?:wizyt|hospitalizacji|leczenia)/gi,
      /(?:od lat|d≈Çugotrwale|przewlekle)\s+leczony/gi,
      /(?:podstawowe|g≈Ç√≥wne)\s+(?:rozpoznanie|leczenie)/gi
    ];
    
    for (const pattern of mainTreatmentPatterns) {
      if (pattern.test(text)) {
        // Sprawd≈∫ czy rozpoznanie wystƒôpuje w pobli≈ºu tych wzorc√≥w
        const contextWindow = 100; // 100 znak√≥w przed i po
        const matches = text.match(pattern);
        if (matches) {
          for (const match of matches) {
            const matchIndex = text.indexOf(match);
            const contextText = text.substring(
              Math.max(0, matchIndex - contextWindow),
              Math.min(text.length, matchIndex + match.length + contextWindow)
            );
            
            if (contextText.toLowerCase().includes(diagnosisLower)) {
              context += 'main_treatment ';
              break;
            }
          }
        }
      }
    }
    
    // Sprawd≈∫ kontekst dodatkowego rozpoznania
    const additionalPatterns = [
      /(?:dodatkowo|r√≥wnie≈º|ponadto|w toku|w trakcie)\s+(?:rozpoznano|stwierdzono)/gi,
      /(?:wsp√≥≈ÇistniejƒÖce|towarzyszƒÖce|dodatkowe)/gi,
      /(?:w wywiadzie|wcze≈õniej|w przesz≈Ço≈õci)/gi
    ];
    
    for (const pattern of additionalPatterns) {
      if (pattern.test(text)) {
        const matches = text.match(pattern);
        if (matches) {
          for (const match of matches) {
            const matchIndex = text.indexOf(match);
            const contextWindow = 100;
            const contextText = text.substring(
              Math.max(0, matchIndex - contextWindow),
              Math.min(text.length, matchIndex + match.length + contextWindow)
            );
            
            if (contextText.toLowerCase().includes(diagnosisLower)) {
              context += 'additional ';
              break;
            }
          }
        }
      }
    }
    
    return context.trim();
  }

  private async extractComorbidities(clinicalSynthesis: any): Promise<string[]> {
    if (!clinicalSynthesis) return [];
    
    const mainDiagnosis = this.extractMainDiagnosis(clinicalSynthesis);
    console.log('[DEBUG] extractComorbidities - G≈Ç√≥wne rozpoznanie:', mainDiagnosis);
    
    const clinicalText = [
      clinicalSynthesis.patientOverview || '',
      ...(clinicalSynthesis.keyObservations || []),
      clinicalSynthesis.treatmentHistory || ''
    ].join(' ').trim();
    
    try {
      const prompt = this.buildComorbiditiesExtractionPrompt(clinicalText, mainDiagnosis);
      const response = await this.callAIForComorbidities(prompt, this.getComorbiditiesSystemPrompt());
      
      console.log('[DEBUG] extractComorbidities - AI response:', response);
      
      // Parse JSON response
      const parsed = JSON.parse(response.replace(/```json|```/g, '').trim());
      const comorbidities = Array.isArray(parsed.comorbidities) ? parsed.comorbidities : [];
      
      console.log('[DEBUG] extractComorbidities - Finalne choroby towarzyszƒÖce (AI):', comorbidities);
      return comorbidities;
      
    } catch (error) {
      console.error('[ERROR] extractComorbidities - AI extraction failed:', error);
      console.warn('[WARNING] extractComorbidities - Falling back to empty array');
      return [];
    }
  }

  private buildComorbiditiesExtractionPrompt(clinicalText: string, mainDiagnosis: string | null): string {
    return `
**G≈Å√ìWNE ROZPOZNANIE:** ${mainDiagnosis || 'nie ustalono'}

**TEKST KLINICZNY DO ANALIZY:**
${clinicalText}

**ZADANIE:** Wyekstraktuj choroby wsp√≥≈ÇistniejƒÖce zgodnie z instrukcjami systemowymi.
Zwr√≥ƒá wynik w formacie JSON zgodnie z przyk≈Çadami.
    `.trim();
  }

  private getComorbiditiesSystemPrompt(): string {
    return `
Jeste≈õ do≈õwiadczonym lekarzem specjalistƒÖ z 20-letnim do≈õwiadczeniem w analizie dokumentacji medycznej. Twoim zadaniem jest precyzyjna ekstrakcja chor√≥b wsp√≥≈ÇistniejƒÖcych z polskiej dokumentacji klinicznej.

**ROLA I ODPOWIEDZIALNO≈öƒÜ:**
- Analizujesz dokumentacjƒô medycznƒÖ pod kƒÖtem chor√≥b towarzyszƒÖcych
- Odr√≥≈ºniasz choroby od metod leczenia z pe≈ÇnƒÖ precyzjƒÖ klinicznƒÖ
- Dostarczasz standardowe nazewnictwo medyczne zgodne z ICD-10

**DEFINICJE KLUCZOWE:**
‚Ä¢ CHOROBA WSP√ì≈ÅISTNIEJƒÑCA = schorzenie inne ni≈º g≈Ç√≥wne rozpoznanie, kt√≥re wystƒôpuje u pacjenta
‚Ä¢ METODA LECZENIA = spos√≥b terapii, farmakoterapia, interwencje medyczne (NIE sƒÖ chorobami)

**PRZYK≈ÅADY EKSTRAKCJI:**

**PRZYK≈ÅAD 1 - POZYTYWNY:**
Tekst: "Pacjent cierpi na F84 - Ca≈Ço≈õciowe zaburzenia rozwojowe, F90 - Zaburzenia hiperkinetyczne, w wywiadzie cukrzyca typu 2"
G≈Ç√≥wne: "zaburzenia depresyjne"
‚Üí {"comorbidities": ["Zaburzenia ze spektrum autyzmu (F84)", "Zesp√≥≈Ç nadpobudliwo≈õci psychoruchowej/ADHD (F90)", "Cukrzyca typu 2"]}

**PRZYK≈ÅAD 2 - NEGATYWNY (wykluczenie leczenia):**
Tekst: "Z uwagi na niepowodzenie leczenia epizodu depresyjnego kilkoma lekami przeciwdepresyjnymi i stwierdzonƒÖ lekooporno≈õƒá"
G≈Ç√≥wne: "zaburzenia depresyjne"
‚Üí {"comorbidities": []}
UZASADNIENIE: "lekami przeciwdepresyjnymi" to METODA LECZENIA, nie choroba

**PRZYK≈ÅAD 3 - MIESZANY:**
Tekst: "Pacjent choruje na nadci≈õnienie tƒôtnicze, leczony sertralinƒÖ, farmakoterapia fluoksetynƒÖ"
G≈Ç√≥wne: "zaburzenia depresyjne"
‚Üí {"comorbidities": ["Nadci≈õnienie tƒôtnicze"]}
UZASADNIENIE: nadci≈õnienie to choroba, sertralina i fluoksetyna to leki (wykluczamy)

**ZASADY EKSTRAKCJI:**

1. **W≈ÅƒÑCZAJ (choroby):**
   ‚úÖ Kody ICD-10 z opisami (F84 ‚Üí "Zaburzenia ze spektrum autyzmu (F84)")
   ‚úÖ Nazwy chor√≥b ("cukrzyca", "nadci≈õnienie", "astma")
   ‚úÖ Opisy po s≈Çowach kluczowych: "cierpi na", "w wywiadzie", "rozpoznano"

2. **WYKLUCZAJ (nie sƒÖ chorobami):**
   ‚ùå Nazwy lek√≥w i metody leczenia ("sertralinƒÖ", "lekami przeciwdepresyjnymi")
   ‚ùå Procedury medyczne ("farmakoterapia", "terapia", "leczenie")
   ‚ùå G≈Ç√≥wne rozpoznanie (je≈õli podane)
   ‚ùå Objawy ("b√≥l g≈Çowy", "nudno≈õci") - tylko je≈õli nie sƒÖ nazwami chor√≥b

3. **MAPOWANIE ICD-10 NA NAZWY:**
   ‚Ä¢ F84 ‚Üí "Zaburzenia ze spektrum autyzmu (F84)"
   ‚Ä¢ F90 ‚Üí "Zesp√≥≈Ç nadpobudliwo≈õci psychoruchowej/ADHD (F90)"
   ‚Ä¢ F42 ‚Üí "Zaburzenia obsesyjno-kompulsyjne (F42)"
   ‚Ä¢ E11 ‚Üí "Cukrzyca typu 2 (E11)"
   ‚Ä¢ I10 ‚Üí "Nadci≈õnienie tƒôtnicze pierwotne (I10)"

4. **KRYTERIUM JAKO≈öCI:**
   - Ka≈ºda pozycja to rzeczywista CHOROBA (nie leczenie)
   - Nazwy pe≈Çne i klinicznie precyzyjne
   - Brak duplikat√≥w i g≈Ç√≥wnego rozpoznania

**FORMAT ODPOWIEDZI:**
Zawsze zwracaj TYLKO poprawny JSON w formacie:
{"comorbidities": ["nazwa choroby 1", "nazwa choroby 2"]}

**WALIDACJA FINALNA:**
Przed zwr√≥ceniem wyniku zadaj sobie pytanie: "Czy ka≈ºda pozycja to rzeczywi≈õcie CHOROBA, a nie metoda leczenia?"
    `.trim();
  }

  // Pomocnicza metoda do wywo≈Çania AI (u≈ºywana przez extractComorbidities)
  private async callAIForComorbidities(userPrompt: string, systemPrompt: string): Promise<string> {
    const backendUrl = 'http://localhost:3001';
    
    try {
      console.log(`üîÑ [MultiAgentCoordinator] Calling AI for comorbidities extraction with model: gemini`);
      
      const response = await fetch(`${backendUrl}/api/ai/chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'gemini',
          systemPrompt,
          userPrompt,
          temperature: 0.1, // Niska temperatura dla precyzji medycznej
          maxTokens: 2000
        })
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(`Backend API Error: ${response.status} - ${errorData.message || JSON.stringify(errorData)}`);
      }

      const data = await response.json();
      console.log(`‚úÖ [MultiAgentCoordinator] AI response received for comorbidities extraction`);
      
      return data.content || '';
      
    } catch (error) {
      console.error(`üí• [MultiAgentCoordinator] AI call failed:`, error);
      throw error;
    }
  }

  private extractEpisodeStartDate(episodeAnalysis: any, _trdAssessment: any): string | null {
    if (episodeAnalysis?.scenarios?.length > 0) {
      return episodeAnalysis.scenarios[0].startDate;
    }
    return null;
  }

  private convertCriteriaToLegacyFormat(criteria: any[]): any[] {
    return criteria.map(criterion => {
      let displayStatus = criterion.status;
      
      // POPRAWKA LOGIKI KRYTERI√ìW WYKLUCZENIA
      // Dla kryteri√≥w wykluczenia (EC, MC): "niespe≈Çnione" = PRZESZED≈Å = zielony
      if (criterion.id?.includes('EC') || criterion.id?.includes('MC')) {
        if (criterion.status === 'niespe≈Çnione') {
          displayStatus = 'spe≈Çnione'; // Pacjent PRZESZED≈Å kryterium wykluczenia (zielony)
        } else if (criterion.status === 'spe≈Çnione') {
          displayStatus = 'niespe≈Çnione'; // Pacjent NIE PRZESZED≈Å kryterium wykluczenia (czerwony)
        }
        // 'weryfikacja' pozostaje bez zmian (≈º√≥≈Çty)
      }
      // Dla kryteri√≥w w≈ÇƒÖczenia (IC): status pozostaje bez zmian
      
      return {
        id: criterion.id,
        name: criterion.name,
        details: criterion.reasoning,
        status: displayStatus,
        userStatus: null,
        userComment: null,
        userOverrideTimestamp: null
      };
    });
  }

  private generateOverallQualification(riskAssessment: any, criteriaAssessment: any): string {
    const recommendation = riskAssessment?.inclusionProbability?.recommendation;
    const score = riskAssessment?.inclusionProbability?.score || 0;
    
    // Sprawd≈∫ czy sƒÖ bezwzglƒôdne wykluczenia
    const hasAbsoluteExclusions = this.checkForAbsoluteExclusions(criteriaAssessment);
    
    if (hasAbsoluteExclusions) {
      return 'Kandydat nie kwalifikuje siƒô do badania - bezwzglƒôdne wykluczenie';
    } else if (recommendation === 'exclude' || score === 0) {
      return 'Kandydat nie kwalifikuje siƒô do badania';
    } else if (recommendation === 'include' && score >= 70) {
      return 'Kandydat kwalifikuje siƒô do badania';
    } else if (recommendation === 'further_evaluation' || (score >= 40 && score < 70)) {
      return 'Kandydat wymaga dodatkowej oceny';
    } else {
      return 'Kandydat prawdopodobnie nie kwalifikuje siƒô do badania';
    }
  }

  private checkForAbsoluteExclusions(criteriaAssessment: any): boolean {
    if (!criteriaAssessment) return false;
    
    // Lista kryteri√≥w bezwzglƒôdnie wykluczajƒÖcych
    const absoluteExclusionCriteria = [
      'EC14', // Historia rodzinna schizofrenii
      'EC1',  // Zaburzenia afektywne dwubiegunowe
      'EC2',  // Zaburzenia psychotyczne
      'GMEC6', // Cukrzyca typu 1
      'GMEC8', // Padaczka
      'GMEC12' // Nadwra≈ºliwo≈õƒá na badany lek
    ];
    
    // Sprawd≈∫ kryteria psychiatryczne
    const psychiatricCriteria = criteriaAssessment.psychiatricExclusionCriteria || [];
    for (const criterion of psychiatricCriteria) {
      if (absoluteExclusionCriteria.includes(criterion.id) && 
          criterion.status === 'spe≈Çnione' &&
          criterion.reasoning?.includes('BEZWZGLƒòDNE WYKLUCZENIE')) {
        return true;
      }
    }
    
    // Sprawd≈∫ kryteria medyczne
    const medicalCriteria = criteriaAssessment.medicalExclusionCriteria || [];
    for (const criterion of medicalCriteria) {
      if (absoluteExclusionCriteria.includes(criterion.id) && 
          criterion.status === 'spe≈Çnione' &&
          criterion.reasoning?.includes('BEZWZGLƒòDNE WYKLUCZENIE')) {
        return true;
      }
    }
    
    return false;
  }

  private extractMainIssues(riskAssessment: any, criteriaAssessment: any): string[] {
    const issues: string[] = [];
    
    // Dodaj bezwzglƒôdne wykluczenia na poczƒÖtku
    if (criteriaAssessment) {
      const allCriteria = [
        ...(criteriaAssessment.psychiatricExclusionCriteria || []),
        ...(criteriaAssessment.medicalExclusionCriteria || [])
      ];
      
      for (const criterion of allCriteria) {
        if (criterion.status === 'spe≈Çnione' && 
            criterion.reasoning?.includes('BEZWZGLƒòDNE WYKLUCZENIE')) {
          issues.push(`BEZWZGLƒòDNE WYKLUCZENIE: ${criterion.name}`);
        }
      }
    }
    
    // Dodaj inne problemy z oceny ryzyka
    if (riskAssessment?.inclusionProbability?.keyFactors?.negative) {
      issues.push(...riskAssessment.inclusionProbability.keyFactors.negative);
    }
    
    // Dodaj problemy z kryteri√≥w w≈ÇƒÖczenia
    if (criteriaAssessment?.inclusionCriteria) {
      for (const criterion of criteriaAssessment.inclusionCriteria) {
        if (criterion.status === 'niespe≈Çnione') {
          if (criterion.reasoning?.includes('CZASOWE WYKLUCZENIE')) {
            issues.push(`Czasowe wykluczenie: ${criterion.name}`);
          } else {
            issues.push(`Niespe≈Çnione kryterium: ${criterion.name}`);
          }
        }
      }
    }
    
    return issues.slice(0, 5); // Ogranicz do 5 najwa≈ºniejszych problem√≥w
  }

  private extractCriticalInfo(riskAssessment: any, criteriaAssessment: any): string[] {
    const criticalInfo: string[] = [];
    
    // Dodaj informacje z oceny ryzyka
    if (riskAssessment?.inclusionProbability?.keyFactors?.neutral) {
      criticalInfo.push(...riskAssessment.inclusionProbability.keyFactors.neutral);
    }
    
    // Dodaj kryteria wymagajƒÖce weryfikacji
    if (criteriaAssessment) {
      const allCriteria = [
        ...(criteriaAssessment.inclusionCriteria || []),
        ...(criteriaAssessment.psychiatricExclusionCriteria || []),
        ...(criteriaAssessment.medicalExclusionCriteria || [])
      ];
      
      for (const criterion of allCriteria) {
        if (criterion.status === 'weryfikacja') {
          criticalInfo.push(`Weryfikacja wymagana: ${criterion.name}`);
        }
      }
    }
    
    return criticalInfo.slice(0, 5); // Ogranicz do 5 najwa≈ºniejszych informacji
  }

  private extractRiskFactors(clinicalSynthesis: any, riskAssessment: any): string[] {
    if (!clinicalSynthesis) return [];
    
    const riskFactors: string[] = [];
    
    const textToSearch = [
      clinicalSynthesis.patientOverview || '',
      ...(clinicalSynthesis.keyObservations || []),
      clinicalSynthesis.treatmentHistory || '',
      ...(clinicalSynthesis.riskFactors || [])
    ].join(' ').toLowerCase();
    
    // INTELIGENTNE ROZPOZNAWANIE CZYNNIK√ìW RYZYKA PSYCHOSOCJALNYCH
    const riskFactorPatterns = [
      // Sytuacja mieszkaniowa i wsparcie spo≈Çeczne
      /(?:mieszka|≈ºyje)\s+(sam|sama|samotnie|bez wsparcia|z babciƒÖ|z rodzicami)/gi,
      /(?:brak|nie ma|bez)\s+(?:wsparcia|rodziny|przyjaci√≥≈Ç|kontakt√≥w spo≈Çecznych)/gi,
      /(?:izolacja|odosobnienie|samotno≈õƒá)\s+(?:spo≈Çeczna|emocjonalna)?/gi,
      
      // Sytuacja zawodowa i finansowa
      /(?:bezrobotny|bezrobotna|nie pracuje|bez pracy)/gi,
      /(?:renta|rentista|na rencie|pobiera rentƒô)/gi,
      /(?:problemy|trudno≈õci)\s+(?:finansowe|ekonomiczne|materialne)/gi,
      /(?:z≈Ça|trudna|niestabilna)\s+sytuacja\s+(?:finansowa|materialna|ekonomiczna)/gi,
      
      // Ryzyko samob√≥jcze i my≈õli rezygnacyjne
      /(?:my≈õli|ideacje|tendencje)\s+(?:samob√≥jcze|suicydalne|rezygnacyjne)/gi,
      /(?:pr√≥by|zamiary)\s+(?:samob√≥jcze|suicydalne)/gi,
      /(?:ryzyko|zagro≈ºenie)\s+(?:samob√≥jcze|suicydalne)/gi,
      
      // Uzale≈ºnienia i substancje
      /(?:uzale≈ºnienie|nadu≈ºywanie|problemy)\s+(?:od|z)\s+(?:alkoholu|narkotyk√≥w|substancji)/gi,
      /(?:pije|pi≈Ç|nadu≈ºywa|u≈ºywa)\s+(?:alkohol|narkotyki|substancje)/gi,
      
      // Konflikty i przemoc
      /(?:konflikty|problemy|trudno≈õci)\s+(?:rodzinne|w rodzinie|w zwiƒÖzku|interpersonalne)/gi,
      /(?:przemoc|krzywdzenie|maltretowanie)\s+(?:domowa|w rodzinie|fizyczna|psychiczna)/gi,
      
      // Stan cywilny i relacje
      /(?:kawaler|panna|rozwiedziony|rozwiedziona|po rozwodzie)/gi,
      /(?:brak|nie ma)\s+(?:sta≈Çego zwiƒÖzku|partnera|partnerki)/gi,
      
      // Wykszta≈Çcenie i funkcjonowanie
      /(?:niskie|podstawowe|niepe≈Çne)\s+wykszta≈Çcenie/gi,
      /(?:problemy|trudno≈õci)\s+(?:w funkcjonowaniu|spo≈Çeczne|zawodowe)/gi
    ];
    
    for (const pattern of riskFactorPatterns) {
      let match;
      while ((match = pattern.exec(textToSearch)) !== null) {
        const fullMatch = match[0];
        const cleanedRisk = this.cleanAndValidateRiskFactor(fullMatch.trim());
        if (cleanedRisk && !riskFactors.includes(cleanedRisk)) {
          riskFactors.push(cleanedRisk);
        }
      }
    }
    
    // Dodaj czynniki ryzyka z riskAssessment - negatywne faktory
    if (riskAssessment?.inclusionProbability?.keyFactors?.negative) {
      for (const risk of riskAssessment.inclusionProbability.keyFactors.negative) {
        if (!riskFactors.includes(risk)) {
          riskFactors.push(risk);
        }
      }
    }
    
    // Dodaj wska≈∫niki ryzyka samob√≥jczego
    if (riskAssessment?.patientRiskProfile?.suicidalRisk?.indicators) {
      for (const indicator of riskAssessment.patientRiskProfile.suicidalRisk.indicators) {
        if (!riskFactors.includes(indicator)) {
          riskFactors.push(indicator);
        }
      }
    }
    
    return riskFactors;
  }

  private cleanAndValidateRiskFactor(riskFactor: string): string | null {
    // Oczy≈õƒá tekst z niepotrzebnych s≈Ç√≥w
    let cleaned = riskFactor
      .replace(/\d+[\s-]*letni[a]?/gi, '')
      .trim();
    
    // Odrzuƒá je≈õli to za kr√≥tkie
    if (cleaned.length < 5) return null;
    
    // Sprawd≈∫ czy to rzeczywi≈õcie czynnik ryzyka psychosocjalny
    const medicalTerms = /(?:astma|cukrzyca|nadci≈õnienie|epilepsja|migrena|F\d+|[A-Z]\d+)/i;
    if (medicalTerms.test(cleaned)) return null;
    
    // Mapowanie na bardziej czytelne opisy
    const riskMapping: Record<string, string> = {
      'mieszka sam': 'brak sieci wsparcia spo≈Çecznego - mieszka sam',
      'mieszka sama': 'brak sieci wsparcia spo≈Çecznego - mieszka sama',
      'mieszka samotnie': 'brak sieci wsparcia spo≈Çecznego - mieszka samotnie',
      'bezrobotny': 'bezrobocie - brak stabilnej sytuacji zawodowej',
      'bezrobotna': 'bezrobocie - brak stabilnej sytuacji zawodowej',
      'na rencie': 'pobiera rentƒô - ograniczona aktywno≈õƒá zawodowa',
      'kawaler': 'stan cywilny kawaler - brak sta≈Çego zwiƒÖzku',
      'panna': 'stan cywilny panna - brak sta≈Çego zwiƒÖzku'
    };
    
    const lowerCleaned = cleaned.toLowerCase();
    if (riskMapping[lowerCleaned]) {
      return riskMapping[lowerCleaned];
    }
    
    return cleaned;
  }

  private generatePatientId(): string {
    const d = new Date();
    return `PAT/${d.getFullYear()}${String(d.getMonth() + 1).padStart(2, '0')}/${Math.floor(
      Math.random() * 1000
    ).toString().padStart(3, '0')}`;
  }

  private log(message: string): void {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] ${message}`;
    this.executionLog.push(logEntry);
    console.log(logEntry);
  }
} 